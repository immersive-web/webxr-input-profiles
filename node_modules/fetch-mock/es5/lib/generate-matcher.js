'use strict';

var _defineProperty2 = require('babel-runtime/helpers/defineProperty');

var _defineProperty3 = _interopRequireDefault(_defineProperty2);

var _assign = require('babel-runtime/core-js/object/assign');

var _assign2 = _interopRequireDefault(_assign);

var _keys = require('babel-runtime/core-js/object/keys');

var _keys2 = _interopRequireDefault(_keys);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _glob = require('glob-to-regexp');
var pathToRegexp = require('path-to-regexp');
var querystring = require('querystring');

var _require = require('./request-utils'),
    headerUtils = _require.headers,
    getPath = _require.getPath,
    getQuery = _require.getQuery,
    normalizeUrl = _require.normalizeUrl;

var isEqual = require('lodash.isequal');

var stringMatchers = {
	begin: function begin(targetString) {
		return function (url) {
			return url.indexOf(targetString) === 0;
		};
	},
	end: function end(targetString) {
		return function (url) {
			return url.substr(-targetString.length) === targetString;
		};
	},
	glob: function glob(targetString) {
		var urlRX = _glob(targetString);
		return function (url) {
			return urlRX.test(url);
		};
	},
	express: function express(targetString) {
		var urlRX = pathToRegexp(targetString);
		return function (url) {
			return urlRX.test(getPath(url));
		};
	},
	path: function path(targetString) {
		return function (url) {
			return getPath(url) === targetString;
		};
	}
};

var getHeaderMatcher = function getHeaderMatcher(_ref) {
	var expectedHeaders = _ref.headers;

	var expectation = headerUtils.toLowerCase(expectedHeaders);
	return function (url, _ref2) {
		var _ref2$headers = _ref2.headers,
		    headers = _ref2$headers === undefined ? {} : _ref2$headers;

		var lowerCaseHeaders = headerUtils.toLowerCase(headerUtils.normalize(headers));

		return (0, _keys2.default)(expectation).every(function (headerName) {
			return headerUtils.equal(lowerCaseHeaders[headerName], expectation[headerName]);
		});
	};
};

var getMethodMatcher = function getMethodMatcher(_ref3) {
	var expectedMethod = _ref3.method;

	return function (url, _ref4) {
		var method = _ref4.method;
		return expectedMethod === (method ? method.toLowerCase() : 'get');
	};
};

var getQueryStringMatcher = function getQueryStringMatcher(_ref5) {
	var expectedQuery = _ref5.query;

	var keys = (0, _keys2.default)(expectedQuery);
	return function (url) {
		var query = querystring.parse(getQuery(url));
		return keys.every(function (key) {
			return query[key] === expectedQuery[key];
		});
	};
};

var getParamsMatcher = function getParamsMatcher(_ref6) {
	var expectedParams = _ref6.params,
	    matcheUrl = _ref6.url;

	if (!/express:/.test(matcheUrl)) {
		throw new Error('fetch-mock: matching on params is only possible when using an express: matcher');
	}
	var expectedKeys = (0, _keys2.default)(expectedParams);
	var keys = [];
	var re = pathToRegexp(matcheUrl.replace(/^express:/, ''), keys);
	return function (url) {
		var vals = re.exec(getPath(url)) || [];
		vals.shift();
		var params = keys.reduce(function (map, _ref7, i) {
			var name = _ref7.name;
			return vals[i] ? (0, _assign2.default)(map, (0, _defineProperty3.default)({}, name, vals[i])) : map;
		}, {});
		return expectedKeys.every(function (key) {
			return params[key] === expectedParams[key];
		});
	};
};

var getBodyMatcher = function getBodyMatcher(_ref8) {
	var expectedBody = _ref8.body;

	return function (url, _ref9) {
		var body = _ref9.body,
		    _ref9$method = _ref9.method,
		    method = _ref9$method === undefined ? 'get' : _ref9$method;

		if (method.toLowerCase() === 'get') {
			// GET requests donâ€™t send a body so the body matcher should be ignored for them
			return true;
		}

		var sentBody = void 0;

		try {
			sentBody = JSON.parse(body);
		} catch (_) {}

		return sentBody && isEqual(sentBody, expectedBody);
	};
};

var getFullUrlMatcher = function getFullUrlMatcher(route, matcherUrl, query) {
	// if none of the special syntaxes apply, it's just a simple string match
	// but we have to be careful to normalize the url we check and the name
	// of the route to allow for e.g. http://it.at.there being indistinguishable
	// from http://it.at.there/ once we start generating Request/Url objects
	var expectedUrl = normalizeUrl(matcherUrl);
	if (route.identifier === matcherUrl) {
		route.identifier = expectedUrl;
	}

	return function (matcherUrl) {
		if (query && expectedUrl.indexOf('?')) {
			return matcherUrl.indexOf(expectedUrl) === 0;
		}
		return normalizeUrl(matcherUrl) === expectedUrl;
	};
};

var getFunctionMatcher = function getFunctionMatcher(_ref10) {
	var functionMatcher = _ref10.functionMatcher;
	return functionMatcher;
};

var getUrlMatcher = function getUrlMatcher(route) {
	var matcherUrl = route.url,
	    query = route.query;


	if (matcherUrl === '*') {
		return function () {
			return true;
		};
	}

	if (matcherUrl instanceof RegExp) {
		return function (url) {
			return matcherUrl.test(url);
		};
	}

	if (matcherUrl.href) {
		return getFullUrlMatcher(route, matcherUrl.href, query);
	}

	for (var shorthand in stringMatchers) {
		if (matcherUrl.indexOf(shorthand + ':') === 0) {
			var urlFragment = matcherUrl.replace(new RegExp('^' + shorthand + ':'), '');
			return stringMatchers[shorthand](urlFragment);
		}
	}

	return getFullUrlMatcher(route, matcherUrl, query);
};

module.exports = function (route) {
	var matchers = [route.query && getQueryStringMatcher(route), route.method && getMethodMatcher(route), route.headers && getHeaderMatcher(route), route.params && getParamsMatcher(route), route.body && getBodyMatcher(route), route.functionMatcher && getFunctionMatcher(route), route.url && getUrlMatcher(route)].filter(function (matcher) {
		return !!matcher;
	});

	return function (url) {
		var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
		var request = arguments[2];
		return matchers.every(function (matcher) {
			return matcher(url, options, request);
		});
	};
};